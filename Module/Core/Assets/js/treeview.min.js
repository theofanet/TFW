(function( $ ){
    var plugin = {
        name: 'TreeView',
        version: '1.0.0'
    }
    var defaults = {
        debug : false,
        autoExpand : false,
        css : {
            list : 'fa-ul',
            listItem : 'fa-li fa',
            collapsed : 'fa-caret-right',
            expanded : 'fa-caret-down'
        }
    }

    var settings;
    var debug, me = null;

    function _checkSiblings(el, checked) {
        var parent = el.parent().parent(),
            all = true;

        el.siblings().each(function() {
            return all = ($(this).children('input[type="checkbox"]').prop("checked") === checked);
        });

        if (all && checked) {
            parent.children('input[type="checkbox"]').prop({
                indeterminate: false,
                checked: checked
            });
            _checkSiblings(parent);
        }
        else if (all && !checked) {
            parent.children('input[type="checkbox"]').prop("checked", checked);
            parent.children('input[type="checkbox"]').prop("indeterminate", (parent.find('input[type="checkbox"]:checked').length > 0));
            _checkSiblings(parent);
        }
        else {
            el.parents("li").children('input[type="checkbox"]').prop({
                indeterminate: true,
                checked: false
            });
        }
    }

    function __changeHandler( e ) {
        /*var currentTarget = $(this);
        var isChecked = currentTarget.is(':checked');

        if (!isChecked) {
            currentTarget.parent()
                .find('input.tw-control')
                .prop('checked', false);
        }

        if (isChecked) {
            var childs = currentTarget.parent("li").children("ul");
            if(childs.length){
                childs
                    .find('input.tw-control')
                    .prop('checked', true);
            }
        }*/
        var currentTarget = $(this);

        var checked = $(this).prop("checked"),
            container = $(this).parent(),
            siblings = container.siblings();

        container.find('input[type="checkbox"]').prop({
            indeterminate: false,
            checked: checked
        });

        _checkSiblings(container, checked);
        //_toggleCollapse( currentTarget );

        me.trigger('treeview.change', currentTarget, me);
    }

    function _toggleCollapse ( element ) {
        var chk = $('input[type="checkbox"]:checked');

        if (chk.is(':checked')) {
            chk.parent()
                .find('>ul.collapse')
                .collapse('show')
                .parent()
                .removeClass("collapsed")
                .find('>i.fa-li')
                .removeClass(settings.css.collapsed)
                .addClass(settings.css.expanded);
        }

        if (!element.is(':checked')) {
            element.parent()
                .find('ul.collapse')
                .collapse('hide')
                .parent()
                .addClass("collapsed")
                .find('i.fa-li')
                .removeClass(settings.css.expanded)
                .addClass(settings.css.collapsed);
        }
    }

    function _toggleCollapseHand( e ){
        var element = $(this).parent();

        if(element.hasClass("collapsed")){
            element
                .removeClass("collapsed");

            element.find('>ul.collapse')
                .collapse('show')
                .parent()
                .find('>i.fa-li')
                .removeClass(settings.css.collapsed)
                .addClass(settings.css.expanded);
        }
        else{
            element
                .addClass("collapsed");

            element.find('>ul.collapse')
                .collapse('hide')
                .parent()
                .find('i.fa-li')
                .removeClass(settings.css.expanded)
                .addClass(settings.css.collapsed);
        }
    }

    function _init() {
        me.on('change', 'input.tw-control', __changeHandler);
        me.on('click', 'i', _toggleCollapseHand);

        me.find('>ul')
            .addClass(settings.css.list)
            .find('ul')
            .addClass('collapse ' +  settings.css.list)
            .parent()
            .prepend(
                $('<i></i>')
                    .addClass(settings.css.listItem + ' treeview-folder ' +
                    settings.css.collapsed)
            );

        if (settings.autoExpand)
            me.find('ul.collapse').collapse('show');

        me.find('li').each(function( index, element ) {
            var elmt = $(element);

            elmt.addClass("collapsed");

            var chk = $('<input/>')
                .prop('type', 'checkbox')
                .prop('class', 'tw-control')
                .prop('value', elmt.attr('data-value'));

            var value = elmt.attr('data-value');
            if(value)
                chk.attr('name', me.attr("name") + "[" + elmt.attr('data-value') + "]")

            var isChecked = elmt.attr('data-checked');

            elmt.prepend(chk);

            if ( isChecked ) {
                chk.prop('checked', true);
                chk.trigger('change');
            }
        });
    }

    function _fill( data ) {
        $( data ).each(function (index, element) {
            me.find('input[value="' + element + '"]')
                .prop('checked', true)
                .trigger('change');
        });
    }

    var publicMethods = {
        init : function( options ) {
            me = this;
            settings = $.extend( defaults, options );
            _init();
            _fill ( options.data );

            return this;
        },
        selectedValues: function() {
            var chk = me.find('input[type="checkbox"]:checked');
            var output = [];

            chk.each(function(index, item) {
                var item = $(item);

                if(typeof item.parent().attr('data-value') !== typeof undefined) {
                    output.push(item.attr('value'));
                }
            })

            return output;
        }
    }

    $.fn.treeview = function (options) {
        if ( publicMethods[options] ) {
            return publicMethods[ options ].apply( this, Array.prototype.slice.call( arguments, 1 ));
        } else if ( typeof options === 'object' || ! options ) {
            // Default to "init"
            return publicMethods.init.apply( this, arguments );
        } else {
            $.error( 'Method ' +  options  + ' does not exist on jQuery.treeview' );
        }
    }

}( jQuery ));